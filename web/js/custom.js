/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
function LoadDropDown(json, selector, optSelect) {
    if (optSelect) {
        $(selector).append('<option value="">Select</option>')
    }
    $.each(json, function (index, value) {
        $(selector).append('<option value="' + value.id + '">' + value.name + '</option>')
    });
}

(function ($) {
    function pageIsSelectmenuDialog(page) {
            var isDialog = false,
                        id = page && page.attr("id");
            $(".filterable-select").each(function () {
                    if ($(this).attr("id") + "-dialog" === id) {
                            isDialog = true;
                            return false;
                    }
            });
            return isDialog;
    }



    $.mobile.document
                // Upon creation of the select menu, we want to make use of the fact that the ID of the
                // listview it generates starts with the ID of the select menu itself, plus the suffix "-menu".
                // We retrieve the listview and insert a search input before it.
                .on("selectmenucreate", ".filterable-select", function (event) {
                        var input,
                                    selectmenu = $(event.target),
                                    list = $("#" + selectmenu.attr("id") + "-menu"),
                                    form = list.jqmData("filter-form");
                        // We store the generated form in a variable attached to the popup so we avoid creating a
                        // second form/input field when the listview is destroyed/rebuilt during a refresh.
                        if (!form) {
                                input = $("<input data-type='search'></input>");
                                form = $("<form></form>").append(input);
                                input.textinput();
                                list
                                            .before(form)
                                            .jqmData("filter-form", form);
                                form.jqmData("listview", list);
                        }
                        // Instantiate a filterable widget on the newly created selectmenu widget and indicate that
                        // the generated input form element is to be used for the filtering.
                        selectmenu
                                    .filterable({
                                            input: input,
                                            children: "> option[value]"
                                    })
                                    // Rebuild the custom select menu's list items to reflect the results of the filtering
                                    // done on the select menu.
                                    .on("filterablefilter", function () {
                                            selectmenu.selectmenu("refresh");
                                    });
                })
                // The custom select list may show up as either a popup or a dialog, depending on how much
                // vertical room there is on the screen. If it shows up as a dialog, then the form containing
                // the filter input field must be transferred to the dialog so that the user can continue to
                // use it for filtering list items.
                .on("pagecontainerbeforeshow", function (event, data) {
                        var listview, form;
                        // We only handle the appearance of a dialog generated by a filterable selectmenu
                        if (!pageIsSelectmenuDialog(data.toPage)) {
                                return;
                        }
                        listview = data.toPage.find("ul");
                        form = listview.jqmData("filter-form");
                        // Attach a reference to the listview as a data item to the dialog, because during the
                        // pagecontainerhide handler below the selectmenu widget will already have returned the
                        // listview to the popup, so we won't be able to find it inside the dialog with a selector.
                        data.toPage.jqmData("listview", listview);
                        // Place the form before the listview in the dialog.
                        listview.before(form);
                })
                // After the dialog is closed, the form containing the filter input is returned to the popup.
                .on("pagecontainerhide", function (event, data) {
                        var listview, form;
                        // We only handle the disappearance of a dialog generated by a filterable selectmenu
                        if (!pageIsSelectmenuDialog(data.toPage)) {
                                return;
                        }
                        listview = data.prevPage.jqmData("listview"),
                                form = listview.jqmData("filter-form");
                        // Put the form back in the popup. It goes ahead of the listview.
                        listview.before(form);
                });
})(jQuery);


function GenerateRandomArray(type) {
    var arrLen = dp.viewTypeCustomDateArray.length;
    var arr = [];
    var stDate;

    var inc = 0;
    if (type === 'next') {
        inc = 1;
        stDate = new Date(dp.viewTypeCustomDateArray[arrLen - 1]);
        for (var i = 0; i < arrLen; i++) {
            var date1 = stDate.addDays(i + inc);
            arr[i] = date1.getFullYear() + '-' + (date1.getMonth() < 9 ? '0' : '') + (date1.getMonth() + 1) + '-' + (date1.getDate() < 10 ? '0' : '') + date1.getDate();
        }
    } else {
        inc = -1;
        stDate = new Date(dp.viewTypeCustomDateArray[0]);
        for (var i = 0; i < arrLen; i++) {
            var date1 = stDate.addDays(inc * (i + 1));
            arr[arrLen - i - 1] = date1.getFullYear() + '-' + (date1.getMonth() < 9 ? '0' : '') + (date1.getMonth() + 1) + '-' + (date1.getDate() < 10 ? '0' : '') + date1.getDate();
        }
    }


    return arr;
}

var getNameFromJson = function getNameFromJson(json, id) {
    var toReturn;
    $.each(json, function (i, v) {
        if (v.id === id) {
            toReturn = v.name;
            return false;
        }
    });
    return toReturn === undefined ? false : toReturn;
}

var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
};